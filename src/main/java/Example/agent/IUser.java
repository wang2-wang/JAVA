package Example.agent;
/*
* 代理模式通过引入一个代理对象来控制原对象的访问
* 代理对象在客户端和目标对象间充当中介，负责将客户端的请求转发给目标对象
* 同时在转发请求前后进行额外操作，控制对象的访问和权限，可以为对象提供额外功能
*
* 抽象主题：真实主题和代理主题的共同接口，确保两者对外提供一致的方法。
* 任何在使用真实主题的地方都可以使用代理主题，无需关心具体使用的是真实对象还是代理对象。
* 客户端只依赖抽象接口而非具体类。修改真实主题或代理主题时，只要保持接口不变，客户端代码不受影响
* 真实主题：实现了抽象主题接口，是代理对象所代表的真实对象
* 代理主题：实现了抽象主题接口，持有对真实主题的引用，通常在真实主题上提供额外功能
* 客户端：使用抽象主题接口来操作其他主题
*
* 代理模式：静态代理，JDK动态代理
* */
public interface IUser {
    //保存用户消息，并保存日志，保存消息为主要功能，保存日志不影响保存消息，所以记录日志是辅助功能
    //保存消息一个用户类。保存日志的日志类，将两个功能组合在一起的代理类，代理类和主要功能的用户类实现同一个接口
    void save();
}
